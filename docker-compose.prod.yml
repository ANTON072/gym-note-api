services:
  db:
    image: mariadb:11.2
    volumes:
      - mariadb-data:/var/lib/mysql
    environment:
      MARIADB_DATABASE: gym_note_production
      MARIADB_USER: gym_note_user
      MARIADB_PASSWORD: ${DB_PASSWORD}
      MARIADB_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      TZ: 'Asia/Tokyo'
    command: ['mariadbd', '--character-set-server=utf8mb4', '--collation-server=utf8mb4_unicode_ci']
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network

  web:
    build:
      context: .
      dockerfile: Dockerfile.prod
    expose:
      - "3000"
    environment:
      RAILS_MASTER_KEY: ${RAILS_MASTER_KEY}
      DATABASE_URL: mysql2://gym_note_user:${DB_PASSWORD}@db:3306/gym_note_production
      RAILS_ENV: production
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network
    volumes:
      - rails-storage:/rails/storage
      - rails-public:/rails/public

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - certbot-webroot:/var/www/certbot
      - rails-public:/rails/public:ro
    depends_on:
      - web
    restart: unless-stopped
    networks:
      - app-network

  certbot:
    image: certbot/certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - certbot-webroot:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    restart: unless-stopped

volumes:
  mariadb-data:
  rails-storage:
  rails-public:
  certbot-etc:
  certbot-var:
  certbot-webroot:

networks:
  app-network:
    driver: bridge
